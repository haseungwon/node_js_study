
Node.js에 대하여...

Node는 웹서버가 아니랍니다. Node 자체로는 아무것도 하지 않습니다 – 아파치 웹서버처럼 HTML 파일 경로를 지정해주고 서버를 열고 그런 설정이 없습니다. 단, HTTP 서버를 직접 작성해야합니다 (일부 라이브러리의 도움을 받으면서). Node.js 는 그저 코드를 실행할 수 있는 하나의 방법에 불과한 그저 JavasScript 런타임일 뿐입니다.

Node.js 의 특징
1. 비동기 I/O 처리 / 이벤트 위주
2. 빠른 속도
3. 단일 쓰레드 / 뛰어난 확장성
4. 라이센스

Node.js 를 어디에 쓸까?
1. 입출력이 잦은 어플리케이션
2. 데이터 스트리밍 어플리케이션
3. 데이터를 실시간으로 다루는 어플리케이션
4. JSON API 기반 어플리케이션
5. 싱글페이지 어플리케이션

설치 방법
1. https://nodejs.org/ko/에 가서 12.4.0 현재 버전 다운
2. cmd 창을 열어서 원하는 파일에 접근
    2-1. cmd 창에서 파일 접근 방법 cd 를 누르고 파일 경로를 쓴다.
3. node.js가 설치 되어있는지 확인하는 방법은 node -v를 눌러서 버전이 나오는 지 확인한다.
4. npm init를 눌러서 처음에 패키지 이름을 쓰고 그 외는 그냥 엔터키를 누른다. 
5. 마지막에 yes 누루면 json확장자 패키지를 다운 받게 된다.

Node js 공부순서 basic
construct_sever_tast -> call_back_function -> event_loop -> HTTP_Module_1 


Node js 공부 순서 Express
express 프레임어크 사용 -> EJS -> RESTful API -> Express-session -> Express+ Mongoose->MongoDB -> RESTful API


-------------------------------------------------------------------

익스프레스(Express.js)는 노드(NodeJS) 상에서 동작하는 웹 개발 프레임웍입니다

프레임워크란
(1) 어플리케이션을 구현할 때 어플리케이션 구현에 꼭 필요한 부분, 구조를 미리 구현해둔 구조체
(2) 루비에는 레일즈(그래서 ruby on rails), php는 라라벨, java는 spring, nodejs는 express를 주로 사용함
   
 라우터 코드와 서버 코드는 다른 파일에 작성하는것이 좋은 코딩 습관입니다.
    router 라는 폴더를 만들고 그 안에 main.js 를 생성해주세요.
    
라우트 지정
- url을 구성하는 것을 라우트 지정이라 함
- 쉽게말하면 서비스 사용자가 어떤 메뉴를 클릭했을 때 메뉴에 해당하는 화면을 브라우저에 출력시키기위해서는
- 서버에 요청을 해야하는데, 요청할 때 주소가 날아감.
- 어떤 주소가 요청되어져왔을 때 어떤 html 문서 파일을 응답(브라우저로 전송)해주겠다는 것을 연결시키는 작업
- 이를 라우팅 한다라고 함 
- 서버로 요청할 때 주소값이 드러나냐 나지않느냐의 차이로 app. 다음에 올 메소드명이 달라짐
- 주소값이 주소창에 드러나도 상관없을 때에는 get을 쓰고 드러나지 말아야할 때에는 post를 사용함

--------------------------------------------------------

ejs 모율
사용자에 요청에 따라 응답하는 내용은 다르지만 제목, ui 가 같은 걸 알 수 있습니다.   
만약 html으로 만든다면 사용자에 요청에 따라 매번 다른 html 파일로 응답해야 합니다. 
html을 정적이고 html템플릿은 동적이라고 알 수 있습니다.


EJS 템플릿 엔진
템플릿 엔진이란, 템플릿을 읽어 엔진의 문법과 설정에 따라서 파일을 HTML 형식으로 변환시키는 모듈입니다. Express 에서 사용하는 인기있는 Jade 템플릿 엔진은 기존의 HTML에 비해 작성법이 완전 다른데,  그에 비해 EJS는 똑같은 HTML에서 <% %> 를 사용하여 서버의 데이터를 사용하거나 코드를 실행 할 수 있습니다.
EJS에서는 두가지만 알면 됩니다.

<%= 자바스크립트 코드 %>
<%= 출력 할 자바스크립트 객체 %>
2번에서는 자바스크립트 객체를 router 에서 받아 올 수도 있습니다.

EJS 분할하기
PHP나 Rails에서 처럼, EJS에서도 코드를 여러 파일로 분리하고 불러와서 사용 할 수 있답니다.
파일을 불러올땐 다음 코드를 사용합니다
<% include FILENAME %>


------------------------------------------------

REST 는 Representational State Transfer 의 약자로서,  월드와이드웹(www) 와 같은 하이퍼미디어 시스템을 위한 소프트웨어 아키텍쳐 중 하나의 형식입니다. REST 서버는 클라이언트로 하여금 HTTP 프로토콜을 사용해 서버의 정보에 접근 및 변경을 가능케 합니다. 여기서 정보는 text, xml, json 등 형식으로 제공되는데, 요즘 트렌드는 json이죠.

HTTP 메소드
HTTP/1.1 에서 제공되는 메소드는  여러개가 있는데요,
REST 기반 아키텍쳐에서 자주 사용되는 4가지 메소드는 다음과 같습니다.

GET – 조회
PUT –  생성 및 업데이트
DELETE – 제거
POST – 생성
여기서 잠깐, POST 와 PUT 좀 헷갈리지 않나요? 둘다 생성을 한다면..
어느 상황에 무엇을 써야하는거지?
http://1ambda.github.io/put-vs-post-restful-api/


데이터베이스 생성
JSON 기반의 사용자 데이터베이스를 만들어보겠습니다.

Node.js 와 궁합이 잘 맞는 MongoDB를 사용했더라면 좋았겠지만
이 포스트의 초점은 Express 이므로 다음으로 미루도록 하겠습니다

data 폴더를 만들고 그 안에 user.json 파일을 생성해주세요:

첫번째 API: GET /list
모든 유저 리스트를 출력하는 GET API 를 작성해보겠습니다.

우선, user.json 파일을 읽어야 하므로, fs 모듈을 사용하겠지요?
main.js에 추가
app.get('/list', function (req, res) {
       fs.readFile( __dirname + "/../data/" + "user.json", 'utf8', function (err, data) {
           console.log( data );
           res.end( data );
       });
    })


두번째 API:  GET /getUser/:username
이번엔 특정 유저 username의 디테일한 정보를 가져오는 GET API 를 작성해보도록 하겠습니다.

다음 코드를 router/main.js 의 list API 아래에 작성해주세요.

app.get('/getUser/:username', function(req, res){
       fs.readFile( __dirname + "/../data/user.json", 'utf8', function (err, data) {
            var users = JSON.parse(data);
            res.json(users[req.params.username]);
       });
    });

파일을 읽은후, 유저 아이디를 찾아서 출력해줍니다.
유저를 찾으면 유저 데이터를 출력하고 유저가 없다면
{} 을 출력하게 됩니다.
fs.readFile()로 파일을 읽었을 시엔 텍스트 형태로읽어지기 때문에, JSON.parse() 롤 해야합니다.


세번째 API: POST addUser/:username
body: { “password”: “_____”, “name”: “_____” }

app.post('/addUser/:username', function(req, res){

        var result = {  };
        var username = req.params.username;

        // CHECK REQ VALIDITY
        if(!req.body["password"] || !req.body["name"]){
            result["success"] = 0;
            result["error"] = "invalid request";
            res.json(result);
            return;
        }

        // LOAD DATA & CHECK DUPLICATION
        fs.readFile( __dirname + "/../data/user.json", 'utf8',  function(err, data){
            var users = JSON.parse(data);
            if(users[username]){
                // DUPLICATION FOUND
                result["success"] = 0;
                result["error"] = "duplicate";
                res.json(result);
                return;
            }

            // ADD TO DATA
            users[username] = req.body;

            // SAVE DATA
            fs.writeFile(__dirname + "/../data/user.json",
                         JSON.stringify(users, null, '\t'), "utf8", function(err, data){
                result = {"success": 1};
                res.json(result);
            })
        })
    });
JSON 형태가 INVALID 하다면 오류를 반환하고, VALID 하다면 파일을 열어서 username의 중복성을 확인 후
JSON 데이터에 추가하여 다시 저장합니다.
stringify(users, null, 2) 은 JSON 의 pretty-print 를 위함 입니다.





마지막 API: DELETE deleteUser/:username

app.delete('/deleteUser/:username', function(req, res){
        var result = { };
        //LOAD DATA
        fs.readFile(__dirname + "/../data/user.json", "utf8", function(err, data){
            var users = JSON.parse(data);

            // IF NOT FOUND
            if(!users[req.params.username]){
                result["success"] = 0;
                result["error"] = "not found";
                res.json(result);
                return;
            }

            delete users[req.params.username];
            fs.writeFile(__dirname + "/../data/user.json",
                         JSON.stringify(users, null, '\t'), "utf8", function(err, data){
                result["success"] = 1;
                res.json(result);
                return;
            })
        })

    })

-------------------------------

express-session

express-session 은 Express 프레임워크에서 세션을 관리하기 위해 필요한 미들웨어 입니다.

secret – 쿠키를 임의로 변조하는것을 방지하기 위한 값 입니다. 이 값을 통하여 세션을 암호화 하여 저장합니다.
resave – 세션을 언제나 저장할 지 (변경되지 않아도) 정하는 값입니다. express-session documentation에서는 이 값을 false 로 하는것을 권장하고 필요에 따라 true로 설정합니다.
saveUninitialized – 세션이 저장되기 전에 uninitialized 상태로 미리 만들어서 저장합니다.

세션 초기 설정 (initialization)
app.get('/', function(req, res){
    sess = req.session;
});
간단하게 이렇게 라우터 콜백함수 안에서 req.session 으로 세션에 접근 할 수 있습니다.

세션 변수 설정
app.get('/login', function(req, res){
    sess = req.session;
    sess.username = "velopert"
});
따로 키를 추가해줄 필요 없이 sess.[키 이름]  = 값 으로 세션 변수를 설정 할 수 있습니다.

세션 변수 사용
app.get('/', function(req, res){
    sess = req.session;
    console.log(sess.username);
});

세션 제거
req.session.destroy(function(err){
   // cannot access session here
});
세션을 제거할땐 (로그아웃) 위와 같이 합니다.
destroy() 메소드의 콜백함수에서는 세션에 접근 할 수 없다는점 명심하세요.